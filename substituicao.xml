<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:jacoco="antlib:org.jacoco.ant" name="substituicao" default="substituicao" basedir=".">
  <!-- XML based on http://www.eclemma.org/jacoco/trunk/doc/examples/build/build.xml  -->
  <description>Builds and tests the project substituicao.</description>

  <!-- Importing the references from a NetBeans project.  -->
  <property name="base" value="lib"/>
  <property file="./lib/nblibraries.properties" />
  <property file="./nbproject/project.properties" />

  <!-- Defining some JaCoCo properties -->
  <property name="result.dir" location="${build.test.results.dir}"/>
  <property name="result.report.dir" location="${result.dir}/jacoco"/>
  <property name="result.exec.file" location="${result.dir}/jacoco.exec"/>

  <!-- Building this porject calling the rigth build.xml from a NetBeans project -->
  <target name="sub-init" description="Calling build-impl.xml from NetBeans">
    <ant antfile="build.xml" target="default" />
  </target>

  <!--  Step 1: Import JaCoCo Ant tasks  -->
  <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
    <classpath path="./lib/jacocoant.jar"/>
  </taskdef>

  <target name="sub-junit" depends="sub-init" description="Run unit tests and code coverage">
    <jacoco:coverage destfile="${result.dir}/jacoco.exec" xmlns:jacoco="antlib:org.jacoco.ant">
      <junit haltonfailure="yes" fork="true" forkmode="once" description="Rerunning JUnit with JaCoCo Coverage">
        <classpath>
          <path path="${run.test.classpath}"/>
        </classpath>
        <formatter type="xml"/>
        <batchtest todir="${result.dir}">
          <fileset dir="${test.src.dir}">
            <include name="**/*Test*.java"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco:coverage>
  </target>

  <target name="sub-report" depends="sub-junit" description="Creating JaCoCo report">
    <jacoco:report>
      <executiondata>
        <file file="${result.exec.file}"/>
      </executiondata>
      <structure name="JaCoCo Ant for substituicao">
        <classfiles>
          <fileset dir="${build.classes.dir}"/>
        </classfiles>
        <sourcefiles encoding="UTF-8">
          <fileset dir="${src.dir}"/>
        </sourcefiles>
      </structure>

      <!--  to produce reports in different formats.  -->
      <html destdir="${result.report.dir}"/>
      <csv destfile="${result.report.dir}/report.csv"/>
      <xml destfile="${result.report.dir}/report.xml"/>
    </jacoco:report>
  </target>

  <target name="substituicao" depends="sub-report" description="Build substituicao project."/>
  
  
  <!-- Example-->
  <path id="classpath.base" />

  <path id="classpath.test">
    <pathelement location="lib/junit-4.12.jar" />
    <pathelement location="lib/hamcrest/hamcrest-core-1.3.jar" />
    <pathelement location="${main.build.dir}"/>
    <path refid="classpath.base" />
  </path>

  <target name="test" depends="run, clean" />

  <target name="compile">
    <mkdir dir="${main.build.dir}"/>
    <javac srcdir="${main.src.dir}" destdir="${main.build.dir}" includeantruntime="false">
      <classpath refid="classpath.base"/>
    </javac>
  </target>

  <target name="build" depends="compile">
    <mkdir dir="${test.build.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
    <echo message="Build done" />
  </target>
   
  <!-- Test and build all files  -->
  <!-- To run this: use "ant" (default) or "ant run" -->
  <target name="run" depends="build">
    <junit printsummary="on" haltonfailure="yes">
        <classpath>
          <path refid="classpath.test" />
          <pathelement location="${test.build.dir}"/>
        </classpath>
        <formatter type="brief" usefile="false" />
        <batchtest>
            <fileset dir="${test.src.dir}" includes="**/*Test*.java" />
        </batchtest>
    </junit>
  </target>
   
  <!-- delete all class files -->
  <!-- To run this: use "ant clean" -->
  <target name="clean">
    <delete>
        <fileset dir="${basedir}" includes="**/*.class" />
    </delete>
    <echo message="clean done" />
  </target>

</project>
